@page "/"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject ProtectedSessionStorage SessionStorage
@implements IAsyncDisposable

<PageTitle>Home</PageTitle>

<div class="flex flex-col items-center">
    <div class="flex flex-col items-center mb-4">
        <h1>鍋ゲーム!</h1>
        <h2>The Hot Pot Game!</h2>
    </div>

    @if (!sessionCreated) {
        <div class="">
            <img src="/images/hot-pot-cute-logo-1.png" class="image--main" />
        </div>

        <br />

        <div class="">
            <label for="Join-Game-Code">Get cooking with your name and a game code:</label>
            <div class="input-group mb-3">
                <input type="text" id="Player-Name" class="form-control" placeholder="Name" @bind="addPlayerName" aria-label="Player Name" aria-describedby="player-name-input">
                <input type="text" id="Join-Game-Code" class="form-control" placeholder="Game code" @bind="joinGameCode" aria-label="Join a game code" aria-describedby="join-game-code-input">
                <div class="input-group-append">
                    <button class="btn btn-success" @onclick="AddPlayer">Go!</button>
                </div>
            </div>
        </div>

        <div class="">
            <label for="New-Game">Want to start a new game?</label>
            <div class="input-group mb-3">
                <input type="text" id="Player-Name" class="form-control" placeholder="Name" @bind="createGamePlayerName" aria-label="Player Name" aria-describedby="player-name-input">
                <div class="input-group-append">
                    <button class="btn btn-success" @onclick="CreateGame">Start!</button>
                </div>
            </div>
        </div>
    }

    @if (sessionCreated) {
        <div class="flex flex-col items-center mb-2">
            <div class="mb-2">Game Lobby Code</div>
            <div class="bg-rose-500 text-white text-2xl p-3 rounded-2xl">
                @gameCode
            </div>
        </div>

        @if (requiredPlayersMet)
        {
            <p class="mb-2">Loading game...</p>

            <ul class="flex flex-col items-center">
                @foreach (var playerName in playerNames)
                {
                    <li class="mb-2">Chef @playerName</li>
                }
            </ul>
        }
        else
        {
            <p class="mb-2">Hiring cooks...</p>

            <ul>
                @foreach (var playerName in playerNames)
                {
                    <li class="mb-2">@playerName</li>
                }
            </ul>
        }
    }
</div>

@code {
    private HubConnection? hubConnection;
    private string? addPlayerName;
    private string? createGamePlayerName;
    private string? joinGameCode;
    private List<string> playerNames = new List<string>();
    private bool requiredPlayersMet = false;
    private bool sessionCreated = false;
    private int? gameCode;

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/lobbyhub"))
            .Build();

        hubConnection.On<Game>("NewPlayerAdded", async (game) =>
        {
            gameCode = game.GameId;
            sessionCreated = true;          

            foreach (var player in game.Players)
            {
                playerNames.Add(player.Name);
            }

            if (playerNames.Count == 4)
            {
                requiredPlayersMet = true;
            }

            await InvokeAsync(StateHasChanged);
            playerNames = new List<string>();

            if (requiredPlayersMet)
            {
                await Task.Delay(3000);
                Navigation.NavigateTo("/Kitchen");
            }
        });

        hubConnection.On<Game>("NewGameCreated", async (game) =>
        {
            gameCode = game.GameId;
            sessionCreated = true;
            await SessionStorage.SetAsync("PlayerId", game.Players[0].Id);
            await SessionStorage.SetAsync("GameCode", gameCode);

            playerNames.Add(game.Players[0].Name);

            await InvokeAsync(StateHasChanged);
            playerNames = new List<string>();
        });

        hubConnection.On<Player>("SetPlayerDataInSession", async (player) =>
        {
            await SessionStorage.SetAsync("PlayerId", player.Id);
            await SessionStorage.SetAsync("GameCode", player.Code);
        });

        await hubConnection.StartAsync();
    }

    private async Task AddPlayer()
    {
        var test = hubConnection?.State;

        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("AddNewPlayer", addPlayerName, joinGameCode);
        }
    }

    private async Task CreateGame()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("CreateNewGame", createGamePlayerName);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
