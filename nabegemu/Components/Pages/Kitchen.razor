@page "/Kitchen"
@rendermode InteractiveServer
@inject NavigationManager Navigation
@inject ProtectedSessionStorage SessionStorage
@implements IAsyncDisposable

<h3>Kitchen</h3>
<h4>Game code: @gameCode</h4>
<h4>PlayerId: @playerId</h4>

@if (dataLoaded)
{
    <div class="flex flex-col items-center">
        <div>
            <div data-selection-area>
                <div data-discard-area>
                </div>

                <div data-draw-area
                     class="flex space-x-4 mb-2">
                    <div data-draw-deck class="border border-black rounded-lg bg-@(kitchenThings.DrawDeckCard.Colour.ToString().ToLower())-200 w-28 h-48 p-1.5 text-sm flex flex-col justify-between">
                        <div class="flex justify-end">
                            <div class="border border-black rounded-lg">
                                <img src="/icons/@(kitchenThings.DrawDeckCard.Type.ToString().ToLower()).png"
                                     class="h-7 w-auto"
                                     alt="@kitchenThings.DrawDeckCard.Type.ToString()"
                                     aria-label="@kitchenThings.DrawDeckCard.Type.ToString()" />
                            </div>
                        </div>
                        <div class="flex justify-center">
                            <div>
                                <img src="/images/@(kitchenThings.DrawDeckCard.ImageName).png"
                                     class="h-15 w-auto"
                                     alt="@kitchenThings.DrawDeckCard.Name"
                                     aria-label="@kitchenThings.DrawDeckCard.Name" />
                            </div>
                        </div>
                        <div class="flex justify-start">
                            <div class="border border-black rounded-lg">
                                <img src="/icons/@(kitchenThings.DrawDeckCard.Type.ToString().ToLower()).png"
                                     class="h-7 w-auto"
                                     alt="@kitchenThings.DrawDeckCard.Type.ToString()"
                                     aria-label="@kitchenThings.DrawDeckCard.Type.ToString()" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div data-active-card-area
                 class="flex space-x-4 mb-2">
                <div data-active-card class="border border-black rounded-lg bg-@(activeCard.Colour.ToString().ToLower())-200 w-28 h-48 p-1.5 text-sm flex flex-col justify-between">
                    <div class="flex justify-end">
                        <div class="border border-black rounded-lg">
                            <img src="/icons/@(activeCard.Type.ToString().ToLower()).png"
                                 class="h-7 w-auto"
                                 alt="@activeCard.Type.ToString()"
                                 aria-label="@activeCard.Type.ToString()" />
                        </div>
                    </div>
                    <div class="flex justify-center">
                        <div>
                            <img src="/images/@(activeCard.ImageName).png"
                                 class="h-15 w-auto"
                                 alt="@activeCard.Name"
                                 aria-label="@activeCard.Name" />
                        </div>
                    </div>
                    <div class="flex justify-start">
                        <div class="border border-black rounded-lg">
                            <img src="/icons/@(activeCard.Type.ToString().ToLower()).png"
                                 class="h-7 w-auto"
                                 alt="@activeCard.Type.ToString()"
                                 aria-label="@activeCard.Type.ToString()" />
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div data-your-deck-area
             class="flex space-x-4 mb-2">
            @foreach (var card in kitchenThings.YourHand)
            {
                <div data-your-deck-card
                     class="border border-black rounded-lg bg-@(card.Colour.ToString().ToLower())-200 w-28 h-48 p-1.5 text-sm flex flex-col justify-between">
                    <div class="flex justify-end">
                        <div class="border border-black rounded-lg">
                            <img src="/icons/@(card.Type.ToString().ToLower()).png"
                                 class="h-7 w-auto"
                                 alt="@card.Type.ToString()"
                                 aria-label="@card.Type.ToString()" />
                        </div>
                    </div>
                    <div class="flex justify-center">
                        <div>
                            <img src="/images/@(card.ImageName).png"
                                 class="h-15 w-auto"
                                 alt="@card.Name"
                                 aria-label="@card.Name" />
                        </div>
                    </div>
                    <div class="flex justify-start">
                        <div class="border border-black rounded-lg">
                            <img src="/icons/@(card.Type.ToString().ToLower()).png"
                                 class="h-7 w-auto"
                                 alt="@card.Type.ToString()"
                                 aria-label="@card.Type.ToString()" />
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}

@code {
    private HubConnection? hubConnection;
    private KitchenThings kitchenThings;
    private int gameCode;
    private string playerId = string.Empty;
    private bool dataLoaded;
    private Card activeCard;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(Navigation.ToAbsoluteUri("/lobbyhub"))
        .Build();

        hubConnection.On<Player>("PrepKitchenComplete", async (player) =>
        {
            dataLoaded = true;
            kitchenThings = player.KitchenThings;
            gameCode = player.Code;
            playerId = player.Id.ToString();
            activeCard = kitchenThings.ActiveCard;

            await InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task PrepKitchen()
    {
        if (hubConnection is not null)
        {
            var sessionPlayerId = await SessionStorage.GetAsync<Guid>("PlayerId");
            var sessionGameCode = await SessionStorage.GetAsync<int>("GameCode");
            gameCode = sessionGameCode.Value;
            playerId = sessionPlayerId.Value.ToString();

            await hubConnection.SendAsync("PrepKitchen", gameCode, playerId);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await PrepKitchen();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}